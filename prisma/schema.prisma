// venta_inventario_app/backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo para las Compañías
model Company {
  id                  Int             @id @default(autoincrement())
  nombre              String          @unique @db.VarChar(255)
  direccion           String?         @db.VarChar(255)
  telefono            String?         @db.VarChar(50)
  emailContacto       String          @unique @db.VarChar(255)
  activo              Boolean         @default(true)
  fechaCreacion       DateTime        @map("fecha_creacion") @default(now()) @db.Timestamp(0)
  fechaActualizacion  DateTime        @map("fecha_actualizacion") @updatedAt @db.Timestamp(0)

  users               User[]          // Relación: Una compañía tiene muchos usuarios
  products            Product[]       // Relación: Una compañía tiene muchos productos
  clients             Client[]
  suppliers           Supplier[]      // <-- Relación agregada: Una compañía tiene muchos proveedores
  stockMovements      StockMovement[]
  sales               Sale[]

  @@map("companies")
}

// Modelo para los Usuarios
model User {
  id                  Int             @id @default(autoincrement())
  companyId           Int             @map("company_id")
  nombreUsuario       String          @unique @db.VarChar(100)
  email               String          @unique @db.VarChar(255)
  password            String          @db.VarChar(255)
  rol                 String          @db.VarChar(50) @default("empleado_inventario")
  activo              Boolean         @default(true)
  fechaCreacion       DateTime        @map("fecha_creacion") @default(now()) @db.Timestamp(0)
  fechaActualizacion  DateTime        @map("fecha_actualizacion") @updatedAt @db.Timestamp(0)

  company             Company         @relation(fields: [companyId], references: [id])
  stockMovements      StockMovement[]
  sales               Sale[]

  @@map("users")
  @@unique([email, companyId])
  @@unique([nombreUsuario, companyId])
}

// Modelo Producto (¡Ahora con relación a Supplier!)
model Product {
  id                  Int             @id @default(autoincrement())
  companyId           Int             @map("company_id")
  nombre              String          @db.VarChar(255)
  descripcion         String?         @db.Text
  sku                 String          @db.VarChar(100)
  precioCompra        Decimal         @map("precio_compra") @db.Decimal(10, 2)
  precioVenta         Decimal         @map("precio_venta") @db.Decimal(10, 2)
  stockActual         Int             @map("stock_actual") @default(0)
  unidadMedida        String          @map("unidad_medida") @db.VarChar(50) @default("unidad")
  categoria           String?         @db.VarChar(100)
  imagenUrl           String?         @map("imagen_url") @db.VarChar(255)
  activo              Boolean         @default(true)
  fechaCreacion       DateTime        @map("fecha_creacion") @default(now()) @db.Timestamp(0)
  fechaActualizacion  DateTime        @map("fecha_actualizacion") @updatedAt @db.Timestamp(0)
  supplierId          Int?            @map("supplier_id") // <-- Nuevo campo para el proveedor
  
  stockMovements      StockMovement[]
  saleItems           SaleItem[]
  
  company             Company         @relation(fields: [companyId], references: [id])
  supplier            Supplier?       @relation(fields: [supplierId], references: [id]) // <-- Nueva relación

  @@map("productos")
  @@index([companyId])
  @@unique([companyId, sku])
  @@index([supplierId]) // <-- Nuevo índice para el proveedor
}

model StockMovement {
  id                  Int             @id @default(autoincrement())
  productId           Int             @map("product_id")
  companyId           Int             @map("company_id")
  userId              Int             @map("user_id")
  tipo                String          @db.VarChar(50)
  cantidad            Int
  motivo              String?         @db.VarChar(255)
  fechaMovimiento     DateTime        @map("fecha_movimiento") @default(now()) @db.Timestamp(0)

  product             Product         @relation(fields: [productId], references: [id])
  company             Company         @relation(fields: [companyId], references: [id])
  user                User            @relation(fields: [userId], references: [id])

  @@map("stock_movements")
  @@index([productId])
  @@index([companyId])
  @@index([userId])
}

model Sale {
  id                  Int             @id @default(autoincrement())
  companyId           Int             @map("company_id")
  userId              Int             @map("user_id")
  fechaVenta          DateTime        @map("fecha_venta") @default(now()) @db.Timestamp(0)
  total               Decimal         @db.Decimal(10, 2)
  estado              String          @db.VarChar(50)

  company             Company         @relation(fields: [companyId], references: [id])
  user                User            @relation(fields: [userId], references: [id])
  saleItems           SaleItem[]

  @@map("sales")
  @@index([companyId])
  @@index([userId])
}

model SaleItem {
  id                  Int             @id @default(autoincrement())
  saleId              Int             @map("sale_id")
  productId           Int             @map("product_id")
  cantidad            Int
  precioUnitario      Decimal         @db.Decimal(10, 2)
  subtotal            Decimal         @db.Decimal(10, 2)

  sale                Sale            @relation(fields: [saleId], references: [id])
  product             Product         @relation(fields: [productId], references: [id])

  @@map("sale_items")
  @@index([saleId])
  @@index([productId])
}

model Client {
  id                  Int             @id @default(autoincrement())
  nombre              String
  email               String?
  telefono            String?
  direccion           String?
  companyId           Int
  company             Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}

model Supplier {
  id                  Int             @id @default(autoincrement())
  nombre              String
  contacto            String?
  telefono            String?
  direccion           String?
  companyId           Int
  company             Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  products            Product[]       // <-- Nueva relación recíproca
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}